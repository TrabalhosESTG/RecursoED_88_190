/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package recursoed_8210190_8210088.GUI;
import javax.swing.*;

import recursoed_8210190_8210088.Json;
import recursoed_8210190_8210088.Map;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.awt.event.ActionEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.awt.event.*;
import java.io.*;
public class App{
	JFrame f= new JFrame("Recurso ED - 8210088 - 8210190");
	JButton btn_jogadores = new JButton("Gestão de Jogadores");
	JButton btnLocais = new JButton("Gestão de Locais");
	JButton btnJogar=new JButton("Jogar");
	JButton rotaCurtaButton=new JButton("Rota mais curtas");
	JButton exportButton=new JButton("Exportar Json");
	JButton importButton=new JButton("Importar Json");

	JButton btnSair=new JButton("Sair");

	Map map = new Map();

	public App(){
		JLabel l1;
		l1=new JLabel("Recurso ED - 8210088 - 8210190");
		l1.setBounds(150,50, 300,30);
		f.add(l1);

		btn_jogadores.setBounds(150,100,200,30);
		f.add(btn_jogadores);
        btn_jogadores.addActionListener(e -> gestaoJogadores(e));

		btnLocais.setBounds(150,150,200,30);
		f.add(btnLocais);
        btnLocais.addActionListener(e -> gestaoLocais(e));

		btnJogar.setBounds(150,200,200,30);
		f.add(btnJogar);
        btnJogar.addActionListener(e -> gestaoJogo(e));

		exportButton.setBounds(150,250,200,30);
		f.add(exportButton);
        exportButton.addActionListener(e -> exportJson(e));

		rotaCurtaButton.setBounds(150,300,200,30);
		f.add(rotaCurtaButton);
        rotaCurtaButton.addActionListener(e -> rotaCurta(e));

		importButton.setBounds(150,350,200,30);
		f.add(importButton);
        importButton.addActionListener(e -> importJson(e));

		btnSair.setBounds(200,400,95,30);
		f.add(btnSair);
        btnSair.addActionListener(e -> closeProgram(e));

		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.setSize(500,500);
		f.setLayout(null);
		f.setVisible(true);
	}

	/**
	* Abre a janela de gestão de jogadores
	*/
	private void gestaoJogadores(ActionEvent e) {
		new GestaoPlayers(map);
	}

	/**
	* Abre a janela de gestão de locais
	*/
	private void gestaoLocais(ActionEvent e) {
		new GestaoLocais(map);
	}

	/**
	* Abre a janela de gestão de jogo
	*/
	private void gestaoJogo(ActionEvent e) {
		if(map.getPlayers().getSize() == 0)
		{
			new Popup("Não existem jogadores");
			return;
		}
		else if(map.getLocals().size() == 0)
		{
			new Popup("Não existem locais");
			return;
		}else if(map.getTotalRoutes() == 0){
			new Popup("Não existem rotas");
			return;
		}
		map.removeMines();
		map.getConnectors25();
		new GestaoJogo(map);
	}

	private void rotaCurta(ActionEvent a){
		if(map.getLocals().size() == 0)
		{
			new Popup("Não existem locais");
			return;
		}else if(map.getTotalRoutes() == 0){
			new Popup("Não existem rotas");
			return;
		}
		new RotaMaisCurta(map);
	}

	/**
	* Exporta o ficheiro Json
	*/
	private void exportJson(ActionEvent e) {
		Json json = new Json();
		JSONObject jsonobj = json.exportarJson(map);
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setDialogTitle("Escolhe onde queres guardar o ficheiro");
		int userSelection = fileChooser.showSaveDialog(f);
		if (userSelection == JFileChooser.APPROVE_OPTION) {
			File fileToSave = fileChooser.getSelectedFile();
			try {
				BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave));
				writer.write(jsonobj.toJSONString());
				writer.close();
				new Popup("Ficheiro guardado com sucesso");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		} else {
			new Popup("Cancelado pelo utilizador");
		}
	}

	/**
	* Importa o ficheiro Json
	*/
	private void importJson(ActionEvent e) {
		Json json = new Json();
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setDialogTitle("Open File");
		int userSelection = fileChooser.showOpenDialog(f);
		if (userSelection == JFileChooser.APPROVE_OPTION) {
			File selectedFile = fileChooser.getSelectedFile();
			System.out.println("Selected file: " + selectedFile.getAbsolutePath());
			try {
				BufferedReader reader = new BufferedReader(new FileReader(selectedFile));
				String jsonString = "";
				for(String line; (line = reader.readLine()) != null; jsonString += line);
				System.out.println(jsonString);
				json.importarJson(map, jsonString);
				reader.close();
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		} else {
			new Popup("Cancelado pelo utilizador");
		}
	}

	/**
	* Fecha o programa
	*/
	private void closeProgram(ActionEvent e) {
		System.exit(0);
	}

	public static void main(String[] args) {
		new App();
	}
}
